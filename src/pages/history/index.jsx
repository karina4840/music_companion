import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { createPlaylist, addTracksToPlaylist } from "../../services/spotify";
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import Header from "components/ui/Header";
import Button from "components/ui/Button";
import PlaylistCoverGrid from "../../components/PlaylistCoverGrid";

const HistoryPage = () => {
  const [savedPlaylists, setSavedPlaylists] = useState([]);
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    const loadSavedPlaylists = () => {
      const saved = localStorage.getItem("savedPlaylists");
      if (saved) {
        setSavedPlaylists(JSON.parse(saved));
      }
    };

    loadSavedPlaylists();
  }, []);

  const handleSaveToSpotify = async (playlist) => {
    try {
      setLoading(true);

      // Create new playlist in Spotify
      const newPlaylist = await createPlaylist(
        playlist.name,
        playlist.description || "Generated by Music Companion"
      );

      // Add tracks to the playlist
      await addTracksToPlaylist(
        newPlaylist.id,
        playlist.tracks.map((track) => track.uri)
      );

      toast.success("Playlist saved to Spotify successfully!");
    } catch (error) {
      console.error("Error saving playlist to Spotify:", error);
      toast.error("Failed to save playlist to Spotify");
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = (playlistId) => {
    const updatedPlaylists = savedPlaylists.filter((p) => p.id !== playlistId);
    setSavedPlaylists(updatedPlaylists);
    localStorage.setItem("savedPlaylists", JSON.stringify(updatedPlaylists));
    toast.success("Playlist deleted from history");
  };

  const handleViewPlaylist = (playlist) => {
    navigate("/generated-playlist-screen", {
      state: {
        playlist,
        fromHistory: true,
      },
    });
  };

  const handleBackToSelection = () => {
    navigate("/playlist-selection-screen");
  };

  return (
    <div className="min-h-screen bg-background">
      <Header variant="transparent" />

      {/* Back Button */}

      <Button
        onClick={handleBackToSelection}
        variant="secondary"
        icon="ArrowLeft"
        className="mt-4 ml-8"
      >
        Back to Selection
      </Button>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <h1 className="text-3xl font-bold text-primary mb-8">
          Generated Playlists History
        </h1>

        {savedPlaylists.length === 0 ? (
          <div className="text-center py-12 bg-surface-alt rounded-lg shadow">
            <p className="text-muted mb-4">No playlists in history yet</p>
            <Button
              variant="primary"
              size="small"
              onClick={() => navigate("/")}
            >
              Generate New Playlist
            </Button>
          </div>
        ) : (
          <div className="grid grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-6">
            {savedPlaylists.map((playlist) => (
              <div
                key={playlist.id}
                className="bg-surface-alt rounded-lg shadow overflow-hidden flex flex-col justify-between"
              >
                <div className="aspect-w-4 aspect-h-3 bg-surface">
                  {playlist.tracks && playlist.tracks.length > 0 ? (
                    <PlaylistCoverGrid tracks={playlist.tracks} />
                  ) : (
                    <div className="w-full h-full flex items-center justify-center bg-surface text-muted">
                      <span>No Image</span>
                    </div>
                  )}
                </div>

                <div className="p-4 min-h-40">
                  <h3 className="text-sm md:text-lg font-semibold text-primary mb-2 line-clamp-2 md:line-clamp-none">
                    {playlist.name}
                  </h3>
                  <p className="text-muted text-xs md:text-sm mb-2">
                    {playlist.tracks.length} tracks
                  </p>
                  <p className="text-muted text-xs">
                    Generated on{" "}
                    {new Date(playlist.generatedAt).toLocaleDateString()}
                  </p>
                </div>

                <div className="p-4 bg-surface border-t border-border flex flex-col gap-4">
                  <Button
                    variant="primary"
                    size="small"
                    onClick={() => handleSaveToSpotify(playlist)}
                    disabled={loading}
                    className="flex-1"
                  >
                    {loading ? "Saving..." : "Save to Spotify"}
                  </Button>{" "}
                  <div className="pt-4 pb-4 bg-surface border-t border-border flex flex-col gap-2 ">
                    <Button
                      variant="secondary"
                      size="small"
                      onClick={() => handleViewPlaylist(playlist)}
                      className=""
                      icon="Eye"
                      iconPosition="right"
                    >
                      View
                    </Button>

                    <Button
                      variant="secondary"
                      size="small"
                      onClick={() => handleDelete(playlist.id)}
                      className=""
                      icon="Trash2"
                      iconPosition="right"
                    >
                      Delete
                    </Button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default HistoryPage;
